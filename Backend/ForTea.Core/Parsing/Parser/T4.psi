options {
  // Parser options
  // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

  // Parser class name and namespace
  parserPackage="GammaJul.ForTea.Core.Parser";
  parserClassName="T4ParserGenerated";

  // Strongly type the lexer we're using. ILexer<int> is the caching lexer instance
  "lexerClassName"="JetBrains.ReSharper.Psi.Parsing.ILexer";

  // FQN of (non-generated) class that provides messages for the parser
  parserMessagesClass="GammaJul.ForTea.Core.Parsing.ParserMessages";

  // Parser, error messages + token bitsets target folder
  parserTargetSubdir="Parsing";

  // Don't generate a bitset unless there's 4 or more comparisons to be made
  tokenBitsetThreshold=4;

  // Composite node type/element generation options
  // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

  // Existing language specific ITreeNode
  "psiElementClassFQName"="GammaJul.ForTea.Core.Tree.IT4TreeNode";

  // Existing token type containing class + namespace
  tokenTypePackageName="GammaJul.ForTea.Core.Parsing";
  tokenTypeClassName="T4TokenNodeTypes";

  // Set base index for generated (element, not token) node types. Defaults to 2000, tokens default to 1000
  // tokenTypeBaseIndex=2000;

  // Tree node interface namespace + target folder (also target folder for navigators + visitors)
  psiInterfacePackageName="GammaJul.ForTea.Core.Tree";
  psiInterfacesTargetSubdir="Tree";

  // Tree node implementation namespace, base type and target folder
  psiStubsPackageName="GammaJul.ForTea.Core.Tree.Impl";
  psiStubsBaseClass="T4CompositeElement";
  psiStubsTargetSubdir="Tree/Impl";

  // Existing composite node type base class
  elementTypeBaseClass="T4CompositeNodeType";

  // Namespace for generating custom interface when `customInterface` option used
  customInterfacePackage="GammaJul.ForTea.Core.Tree.Custom";

  // Any role used in this file that begins with this prefix must be defined in `ChildRole`
  publicChildRolePrefix="T4_";

  // Namespace and suffix for custom element instance implementation created by
  // node type when `customImpl` option is specfied.
  // Default suffix is `Impl`
  customImplPackage="GammaJul.ForTea.Core.Tree.Impl";
  "customImplSuffix"="";

  // Required on. Changes behaviour of various things, e.g. public child role values based on prefix
  disableReflection;

  // Required. If missing, generates Add/Remove methods for each collection
  generateWorkingPsi;

  "psiClassesPrefix"="";
  "psiClassPrefix"="T4";
  "interfaceNamePrefix"="IT4";
  "objectClassFQName"="System.Object";
}

errorhandling file options { stubBase="T4FileBase"; customParseFunction; }
:
    (block<BLOCK, Blocks> | RAW_TEXT<RAW_TEXT, RawTexts> | NEW_LINE<NEW_LINE, NewLines>)*
;

// ---- ---- ---- ---- blocks ---- ---- ---- ----

interface block:
    directive | codeBlock
;

interface codeBlock:
    statementBlock | expressionBlock | featureBlock
;

statementBlock:
    STATEMENT_BLOCK_START<STATEMENT_BLOCK_START, Start>
    code<CODE, Code>
    BLOCK_END<BLOCK_END, End>
;

expressionBlock:
    EXPRESSION_BLOCK_START<EXPRESSION_BLOCK_START, Start>
    code<CODE, Code>
    BLOCK_END<BLOCK_END, End>
;

featureBlock:
    FEATURE_BLOCK_START<FEATURE_BLOCK_START, Start>
    code<CODE, Code>
    BLOCK_END<BLOCK_END, End>
;

// ---- ---- ---- ---- directives ---- ---- ---- ----

// Note: parsing method for this rule is overridden
//
// All these directives have same start,
// and generated parser seems to only take into account one lookahead token,
// so we have to do that manually.
// I really wish there was a simpler way of doing that
//
// Cannot add customParseFunction, though, as generated parse function causes error message to get defined
//
// error handling is used by overriding method
errorhandling interface directive:
      templateDirective
    | parameterDirective
    | outputDirective
    | assemblyDirective
    | importDirective
    | includeDirective
    | cleanupBehaviorDirective
    | unknownDirective
;

errorhandling templateDirective:
    DIRECTIVE_START<DIRECTIVE_START, Start>
    TEMPLATE<TEMPLATE, Name>
    directiveAttribute<DIRECTIVE_ATTRIBUTE, Attributes>*
    BLOCK_END<BLOCK_END, End>
;

errorhandling parameterDirective:
    DIRECTIVE_START<DIRECTIVE_START, Start>
    PARAMETER<PARAMETER, Name>
    directiveAttribute<DIRECTIVE_ATTRIBUTE, Attributes>*
    BLOCK_END<BLOCK_END, End>
;

errorhandling outputDirective:
    DIRECTIVE_START<DIRECTIVE_START, Start>
    OUTPUT<OUTPUT, Name>
    directiveAttribute<DIRECTIVE_ATTRIBUTE, Attributes>*
    BLOCK_END<BLOCK_END, End>
;

errorhandling assemblyDirective options { stubBase="T4DirectiveWithPathBase"; }:
    DIRECTIVE_START<DIRECTIVE_START, Start>
    ASSEMBLY<ASSEMBLY, Name>
    directiveAttribute<DIRECTIVE_ATTRIBUTE, Attributes>*
    BLOCK_END<BLOCK_END, End>
;

errorhandling importDirective:
    DIRECTIVE_START<DIRECTIVE_START, Start>
    IMPORT<IMPORT, Name>
    directiveAttribute<DIRECTIVE_ATTRIBUTE, Attributes>*
    BLOCK_END<BLOCK_END, End>
;

errorhandling includeDirective options { stubBase="T4DirectiveWithPathBase"; }:
    DIRECTIVE_START<DIRECTIVE_START, Start>
    INCLUDE<INCLUDE, Name>
    directiveAttribute<DIRECTIVE_ATTRIBUTE, Attributes>*
    BLOCK_END<BLOCK_END, End>
;

errorhandling cleanupBehaviorDirective:
    DIRECTIVE_START<DIRECTIVE_START, Start>
    CLEANUP_BEHAVIOR<CLEANUP_BEHAVIOR, Name>
    directiveAttribute<DIRECTIVE_ATTRIBUTE, Attributes>*
    BLOCK_END<BLOCK_END, End>
;

errorhandling unknownDirective:
    DIRECTIVE_START<DIRECTIVE_START, Start>
    UNKNOWN_DIRECTIVE_NAME<UNKNOWN_DIRECTIVE_NAME, Name>
    directiveAttribute<DIRECTIVE_ATTRIBUTE, Attributes>*
    BLOCK_END<BLOCK_END, End>
;

directiveAttribute:
    attributeName<AttributeName, Name>
    EQUAL<EQUAL, Equal>
    QUOTE<OPENING_QUOTE, OpeningQuote>
    attributeValue<DIRECTIVE_ATTRIBUTE_VALUE, Value>
    QUOTE<CLOSING_QUOTE, ClosingQuote>
;

attributeName:
    TOKEN<TOKEN, Token>
;

// ---- ---- ---- ---- included file ---- ---- ---- ----

includedFile:
    ( block<BLOCK, Blocks>
    | RAW_TEXT<RAW_TEXT, RawTexts>
    | NEW_LINE<NEW_LINE, NewLines>
    | includedFile<INCLUDED_FILE, IncludedFiles>
    )*
;

// ---- ---- ---- ---- raw values ---- ---- ---- ----

code:
    RAW_CODE<RAW_CODE, RawCodes>*
;

errorhandling attributeValue:
    ( RAW_ATTRIBUTE_VALUE<RAW_ATTRIBUTE_VALUE, RawAttributeValues>
    | macro<macro, Macros>
    | environmentVariable<environmentVariable, EnvironmentVariables>
    )*
;

errorhandling macro:
    DOLLAR<DOLLAR, Dollar>
    LEFT_PARENTHESIS<LEFT_PARENTHESIS, LeftParenthesis>
    RAW_ATTRIBUTE_VALUE<RAW_ATTRIBUTE_VALUE, RawAttributeValue>?
    RIGHT_PARENTHESIS<RIGHT_PARENTHESIS, RightParenthesis>
;

errorhandling environmentVariable:
    PERCENT<START_PERCENT, StartPercent>
    RAW_ATTRIBUTE_VALUE<RAW_ATTRIBUTE_VALUE, RawAttributeValue>?
    PERCENT<END_PERCENT, EndPercent>
;
