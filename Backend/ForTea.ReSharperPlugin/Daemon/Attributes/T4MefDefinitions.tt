<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Drawing" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Drawing" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#
	var identifiers = new List<T4ColoredIdentifier>
	{
		new(
			"block tag",
			this,
			backgroundColor: ColorTranslator.FromHtml("#FBFB64"),
			foregroundColor: Color.Black),
		new(
			"directive",
			this,
			backgroundColor: Color.Transparent,
			foregroundColor: ColorTranslator.FromHtml("#EE82EE")),
		new(
			"directive attribute",
			this,
			backgroundColor: Color.Transparent,
			foregroundColor: ColorTranslator.FromHtml("#569CD6")),
		new(
			"attribute value",
			this,
			backgroundColor: Color.Transparent,
			foregroundColor: ColorTranslator.FromHtml("#9C5800")),
        new(
            "macro",
            this,
            backgroundColor: Color.Transparent,
            foregroundColor: ColorTranslator.FromHtml("#569CD6")),
        new(
            "environment variable",
            this,
            backgroundColor: Color.Transparent,
            foregroundColor: ColorTranslator.FromHtml("#B5CEA8"))
	};
#>
//------------------------------------------------------------------------------
// <auto-generated>
//	 This code was generated by a tool.
//	 Changes to this file may cause incorrect behavior and will be lost if
//	 the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.ComponentModel.Composition;
using System.Windows.Media;
using GammaJul.ForTea.Core.Daemon.Attributes;
using JetBrains.Platform.VisualStudio.SinceVs10.TextControl.Markup.FormatDefinitions;
using Microsoft.VisualStudio.Text.Classification;
using Microsoft.VisualStudio.Utilities;
using JetBrains.TextControl.DocumentMarkup;

namespace JetBrains.ForTea.ReSharperPlugin.Daemon.Attributes
{
<#
	var identifiersWithAttributes = identifiers.Where(identifier => identifier.GenerateAttribute).ToList();
	if (identifiersWithAttributes.Any())
	{
#>
    #region registration
<#
	    foreach (var identifier in identifiersWithAttributes)
	    {
#>
    [RegisterHighlighter(
	    T4HighlightingAttributeIds.<#= ToConstantIdentifier(identifier.Name) #>,
	    GroupId = T4HighlightingAttributeGroup.ID,
	    EffectType = EffectType.TEXT,
	    ForegroundColor = "<# PrintHexColor(identifier.ForegroundColor); #>"<#
	        if (identifier.DarkForegroundColor != null)
	        {
#>,
        DarkForegroundColor = "<# PrintHexColor(identifier.DarkForegroundColor.Value); #>"
<#
	        }
#>

    )]
<#
	    }
#>
    public class T4ReSharperAttributes
    {
    }
    #endregion
<#
    }
#>
<#
	foreach (var identifier in identifiers)
	{
#>
	#region <#= identifier.Name #>
	[ClassificationType(ClassificationTypeNames = Name)]
	[Order(
		After = VsSyntaxPriorityClassificationDefinition.Name,
		Before = VsAnalysisPriorityClassificationDefinition.Name
	)]
	[Export(typeof(EditorFormatDefinition))]
	[Name(Name)]
	[System.ComponentModel.DisplayName(Name)]
	[UserVisible(true)]
	internal sealed class <#
		identifier.PrintGeneratedClassName();
#> : ClassificationFormatDefinition
	{
		private const string Name = T4HighlightingAttributeIds.<#= ToConstantIdentifier(identifier.Name) #>;

		public <#
		identifier.PrintGeneratedClassName();
#>()
		{
			DisplayName = Name;
<#
		if (identifier.BackgroundColor.A != 0)
		{
#>			BackgroundColor = Color.FromRgb(<#
			PrintColorComponents(identifier.BackgroundColor);
#>);
<#
		}
#>
<#
		if (identifier.ForegroundColor.A != 0)
		{
#>			ForegroundColor = Color.FromRgb(<#
			PrintColorComponents(identifier.ForegroundColor);
#>);
<#
		}
#>
		}

		[Export, Name(Name), BaseDefinition("formal language")]
		internal ClassificationTypeDefinition ClassificationTypeDefinition;
	}
	#endregion

<#
	}
#>
}
<#+
	private void PrintColorComponents(Color color)
	{
#>0x<#= color.R.ToString("X2") #>, 0x<#= color.G.ToString("X2") #>, 0x<#= color.B.ToString("X2") #><#+
	}

	private void PrintHexColor(Color color)
	{
#>#<#= color.R.ToString("X2") #><#= color.G.ToString("X2") #><#= color.B.ToString("X2") #><#+
	}

	private readonly struct T4ColoredIdentifier
	{
		private GeneratedTextTransformation Transformation { get; }
		public string Name { get; }
		public Color BackgroundColor { get; }
		public Color ForegroundColor { get; }
        public Color? DarkForegroundColor { get; }
        public bool GenerateAttribute { get; }

		public T4ColoredIdentifier(
			string name,
			GeneratedTextTransformation transformation,
			Color backgroundColor,
			Color foregroundColor,
            Color? darkForegroundColor = null,
            bool generateAttribute = false)
		{
			Name = name;
			Transformation = transformation;
			BackgroundColor = backgroundColor;
			ForegroundColor = foregroundColor;
		    DarkForegroundColor = darkForegroundColor;
		    GenerateAttribute = generateAttribute;
		}

		public void PrintGeneratedClassName() =>
			Transformation.Write("{0}ClassificationFormatDefinition", ToIdentifier(Name));
	}

	private static string ToConstantIdentifier(string name) => name.ToUpper().Replace(" ", "_");

	private static string ToIdentifier(string name)
	{
		var result = new StringBuilder();
		foreach (string part in name.Split(' ').Select(subName => char.ToUpper(subName[0]) + subName.Substring(1)))
		{
			result.Append(part);
		}
		return result.ToString();
	}
#>